package agent

import (
	"time"
)

// Agent is an intelligent agent that can autonomously plan and execute multiple workflows
// based on task objectives.
type Agent struct {
	Name        string         `mapstructure:"name"`
	Description string         `mapstructure:"description"`
	Flows       []string       `mapstructure:"flows"`      // Available flows - core capabilities of the agent
	ClientName  string         `mapstructure:"clientName"` // LLM client for task planning
	Memory      AgentMemory    `mapstructure:"-"`          // Agent's working memory
	Config      map[string]any `mapstructure:"config"`     // Agent configuration parameters
}

// TaskStatus represents the status of a task execution.
type TaskStatus string

const (
	TaskStatusPending   TaskStatus = "pending"
	TaskStatusRunning   TaskStatus = "running"
	TaskStatusCompleted TaskStatus = "completed"
	TaskStatusFailed    TaskStatus = "failed"
)

// ExecutionPlan is the execution plan generated by the agent based on the task.
// Each step in the plan is a Flow invocation.
type ExecutionPlan struct {
	Objective   string          `mapstructure:"objective"`   // Task objective
	Steps       []ExecutionStep `mapstructure:"steps"`       // Planned execution steps
	Description string          `mapstructure:"description"` // Overall description of the plan
}

// ExecutionStep represents a single step in the execution plan.
type ExecutionStep struct {
	FlowName    string                 `mapstructure:"flowName"`    // Name of the flow to execute
	Input       string                 `mapstructure:"input"`       // Input for the flow
	Variables   map[string]interface{} `mapstructure:"variables"`   // Variables for the flow
	Description string                 `mapstructure:"description"` // Description of this step
	Order       int                    `mapstructure:"order"`       // Execution order
}

// StepResult represents the result of executing a single step.
type StepResult struct {
	FlowName    string                 `mapstructure:"flowName"`
	Description string                 `mapstructure:"description"`
	Input       string                 `mapstructure:"input"`
	Output      string                 `mapstructure:"output"`
	Variables   map[string]interface{} `mapstructure:"variables"`
	Status      string                 `mapstructure:"status"`
	Error       string                 `mapstructure:"error"`
	StartTime   time.Time              `mapstructure:"startTime"`
	EndTime     time.Time              `mapstructure:"endTime"`
	Duration    time.Duration          `mapstructure:"duration"`
}

// TaskResult represents the final result of task execution.
type TaskResult struct {
	Objective      string                 `mapstructure:"objective"`
	FinalOutput    string                 `mapstructure:"finalOutput"`
	ExecutionPlan  *ExecutionPlan         `mapstructure:"executionPlan"`
	StepResults    []StepResult           `mapstructure:"stepResults"`
	Status         string                 `mapstructure:"status"`
	Error          string                 `mapstructure:"error"`
	FinalVariables map[string]interface{} `mapstructure:"finalVariables"`
	ExecutedAt     time.Time              `mapstructure:"executedAt"`
	StartTime      time.Time              `mapstructure:"startTime"`
	EndTime        time.Time              `mapstructure:"endTime"`
	Duration       time.Duration          `mapstructure:"duration"`
}

// agentTask represents internal task structure (users don't need to create this directly).
type agentTask struct {
	id        string
	objective string
	createdAt time.Time
}
